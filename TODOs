D - add the is_annual_renewal field in a video form when create the 'videos' record

D - when assigning the video to users
no record: set the assigned_date to now()
has record: don't change
has record but unselect: remove the 'users_videos' record.(check if that's the case)

D - when clicks on 'watch it again(required)'
reset the assigned_date

D - watching video in driver dashboard, open the modal just like the way to see video in admin dashboard.

D - when watching video, when watch nearly the end of the video, set the is_completed to true.

D - Refactoring the UI based on https://preview--tfs-driver-hub-online.lovable.app/

D - refactor the code according to Tyler's suggestion.

Show toasters for actions
login and signup - show error in a popup in the bottom right of the page.

D - Manage users
add user, error: email rate limit exceeded

--- left to fix ---

D - have a separate table for user's role and refactor the code

D - refactor components folder for clarity, scalability, and modularity

D - create policies for all tables

D - after adding useUsersStore, things become lagged, is it because the state is used by so many compoents?
like in the user-card

D - Mange users
click 'Assign to Users' to unassign the video from the user, the list doesn't refresh.

D - create a 'Mark as Completed' button to allow driver manually complete the video.

D - tab swithing and refreshing.

D - update UI for reset password

D - user-details
click 'Assign Videos' -> update the UI of the 'Save Assignments' button

D - add functionality to update user role

D - show the spinner svg for buttons

D - Improve the UI for page loading

D - On the dashboard, in order to get the number of users assigned to each video, it looks like you're making a separate call to the database for each video. A more scalable and efficient approach would be to use aggregate queries. Here is a good article on them: https://supabase.com/blog/postgrest-aggregate-functions

D - Small one with an easy fix, it looks like you've dumped your database into the schema.sql file, which is fine, but it looks like there's a large number of newline characters in there, which makes it difficult to maintain. There are also a couple of empty migration files in your repo.

Testing required.
D - Another small one, it looks like you have two api routes, one in the pages directory, and one in the app directory. it's best to stick to one pages structure so I would just move the contents of your pages directory into /app.

I see you're still using supabase realtime, but would it be possible to reduce the number of requests being made? You're subscribing to the users_videos table, and then loading the users_videos table in the callback, when you can access this data from the context. You can also load relational data into this context to prevent the need to also load in the videos and users tables as well.

I see you're generating your supabase types file, but you're not casting it to your supabase client in src/lib/supabase.ts. You can simply cast the type to your client initiator like this createClient<Database>(supabaseUrl, supabaseAnonKey);, and all your client responses will be typecast to your database, which can really help the AI to reduce errors.
